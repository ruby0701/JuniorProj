// similarity_test1.cpp : Defines the entry point for the console application.
//

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <ctype.h>
#include <algorithm>
using namespace std;

int LongestCommonSubstring(const string& str1, const string& str2)
{
	if (str1.empty() || str2.empty())
	{
		return 0;
	}

	int *curr = new int[str2.size()];
	int *prev = new int[str2.size()];
	int *swap = nullptr;
	int maxSubstr = 0;

	for (int i = 0; i<str1.size(); ++i)
	{
		for (int j = 0; j<str2.size(); ++j)
		{
			if (str1[i] != str2[j])
			{
				curr[j] = 0;
			}
			else
			{
				if (i == 0 || j == 0)
				{
					curr[j] = 1;
				}
				else
				{
					curr[j] = 1 + prev[j - 1];
				}
				//The next if can be replaced with:
				//maxSubstr = max(maxSubstr, curr[j]);
				//(You need algorithm.h library for using max())
				if (maxSubstr < curr[j])
				{
					maxSubstr = curr[j];
				}
			}
		}
		swap = curr;
		curr = prev;
		prev = swap;
	}
	delete[] curr;
	delete[] prev;
	return maxSubstr;
}



#define dataNum 211


int main()
{
	//removes all files first
	remove("report.txt");
	remove("result.txt");
	remove("label_1.txt");
	remove("label_0.txt");

	//open this file for recording all the situations that are out of control
	ofstream logFile;
	logFile.open("all_report.txt",ios::out);

	//open this file for similarity result
	ofstream result;
	result.open("all_result.txt",ios::out);

	ofstream label_1;
	label_1.open("all_label_1.txt", ios::out);

	ofstream label_0;
	label_0.open("all_label_0.txt", ios::out);

	//open 2 files in 2 for loops
	for (int index_PTT = 1; index_PTT <= dataNum; index_PTT++)
	{
		for (int index_FB = 1; index_FB <= dataNum; index_FB++)
		{
			string fileName1 = to_string(index_PTT) + "_PTT.txt";//PTT
			string fileName2 = to_string(index_FB) + ".txt";//FB
			//string fileName1 = "test_PTT.txt";
			//string fileName2 = "test_FB.txt";
			ifstream file1;
			ifstream file2;

			file1.open(fileName1);
			file2.open(fileName2);

			while (!file1.is_open() || !file2.is_open())
			{
				break;
			}

			while (file1.is_open() && file2.is_open())
			{
				//store the datas from 2 files individually, use string array , do the rest of the processing in each function
				string data1[12];
				string data2[12];

				for (int i = 0; i < 12; i++)
				{
					data1[i] = "";
					data2[i] = "";
				}

				int count = 1;
				while (!file1.eof())
				{
					if (count < 10)
					{
						string temp = "";
						getline(file1, temp);
						temp = temp.substr(2, temp.length());
						data1[count - 1] = temp;
						//cout << data1[count - 1] << endl;
						count++;
					}
					if (count >= 10)
					{
						string temp = "";
						getline(file1, temp);
						temp = temp.substr(3, temp.length());
						data1[count - 1] = temp;
						//cout << data1[count - 1] << endl;
						count++;
					}
					if (count >= 12)
						break;
				}

				count = 1;
				while (!file2.eof())
				{
					if (count < 10)
					{
						string temp = "";
						getline(file2, temp);
						temp = temp.substr(2, temp.length());
						data2[count - 1] = temp;
						//cout << data2[count - 1] << endl;
						count++;
					}
					if (count >= 10)
					{
						string temp = "";
						getline(file2, temp);
						temp = temp.substr(3, temp.length());
						data2[count - 1] = temp;
						//cout << data2[count - 1] << endl;
						count++;
					}
					if (count >= 12)
						break;
				}

				file1.close();
				file2.close();

				//use double array to record the results of comparing，calaulate first, consider output format later
				double similarity[12] = { 0 };

				//function1, similarity for name, KMP
				if (data1[0] == "" || data2[0] == "")
				{
					similarity[0] = 0;

					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of username is 0 :" << endl;
					logFile << "some data doesn't exist!" << endl;
					logFile << "1 : " << data1[0] << " vs. " << "2 : " << data2[0] << endl << endl;
				}
				else if (data1[0] != "" || data2[0] != "")
				{
					int i, j, x = 0;


					string sentence = data2[0];//FB,、
					string temp2[50];

					stringstream ss(sentence);//FB
					string item;
					int l = 0;
					while (getline(ss, item, ';'))
					{
						cout << "item " << l << " : " << item << endl;
						temp2[l] = item;
						l++;
					}
					x = l - 1;

					sentence = data1[0];//FB,、
					string temp3[50];

					stringstream ss1(sentence);//FB
					string item1;
					int l2 = 0;
					while (getline(ss1, item1, ';'))
					{
						cout << "item " << l2 << " : " << item1 << endl;
						temp3[l2] = item1;
						l2++;
					}

					string ptt, fb;
					double amount = 0;
					double same = 0, result = 0;
					vector <char> all_char;

					for (int t = l - 1; t >= 0; t--)
					{
						for (int j = 0; j < l2; j++)
						{
							ptt = temp3[j];
							fb = temp2[t];

							same += LongestCommonSubstring(ptt, fb);
						}
					}

					for (int t = l - 1; t >= 0; t--)
					{
						for (int j = 0; j < l2; j++)
						{
							ptt = temp3[j];
							fb = temp2[t];

							for (int i = 0; i < ptt.size(); i++)
							{
								if (find(all_char.begin(), all_char.end(), ptt.at(i)) == all_char.end())
								{
									all_char.push_back(ptt.at(i));
								}
							}
							for (int i = 0; i < fb.size(); i++)
							{
								if (find(all_char.begin(), all_char.end(), fb.at(i)) == all_char.end())
								{
									all_char.push_back(fb.at(i));
								}
							}
						}
					}

					amount = (double)all_char.size() + 1;
					result = (same / amount);
					similarity[0] = result;

					if (similarity[0] == 0 || similarity[0] > 1)
					{
						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of name is 0 or larger than 1:" << endl;
						logFile << "needs double checking!" << endl;
						logFile << "1 : " << data1[0] << " vs. " << "2 : " << data2[0] << endl << endl;
					}
				}

				



				//function2, similarity for gender, 0/1
				if (data1[1] != "" && data2[1] != "")
				{
					if (data1[1] == data2[1])
					{
						similarity[1] = 1;
					}
					else
					{
						similarity[1] = 0;
					}
				}
				else if (data1[1] == "" || data2[1] == "")
				{
					similarity[1] = 0;
				}

				//function3, similarity for birthday, self-def
				if (data1[2] != "" && data2[2] != "")
				{
					string sentence1 = data1[2];//PTT,;
					string sentence2 = data2[2];//FB,、

					string temp1[4];//at most 26 types
					string temp2[4];

					stringstream ss(sentence1);//PTT
					string item;
					int i = 0;
					int t1 = 0, t2 = 0;
					while (getline(ss, item, '/'))
					{
						temp1[i] = item;
						i++;
					}
					t1 = i;

					stringstream ss2(sentence2);//FB
					string item2;
					i = 0;
					while (getline(ss2, item2, '/'))
					{
						temp2[i] = item2;
						i++;
					}
					t2 = i;

					if (t1 == 2 && t2 == 2)//both MM/DD
					{
						if (temp1[0] == temp2[0] && temp1[1] == temp2[1])
						{
							similarity[2] = 0.8;
						}
					}

					if (t1 == 3 && t2 == 2)//YYYY/MM/DD and MM/DD
					{
						if (temp1[1] == temp2[0] && temp1[2] == temp2[1])
						{
							similarity[2] = 0.8;
						}
					}

					if (t1 == 2 && t2 == 3)//MM/DD and YYYY/MM/DD
					{
						if (temp1[0] == temp2[1] && temp1[1] == temp2[2])
						{
							similarity[2] = 0.8;
						}
					}

					if (t1 == 3 && t2 == 3)//YYYY/MM/DD and YYYY/MM/DD
					{
						if (temp1[1] == temp2[1] && temp1[2] == temp2[2])
						{
							similarity[2] = 0.8;
						}
						if (temp1[0] == temp2[0])
						{
							similarity[2] = 1;
						}
					}
					else if (t1 < 2 && t2 < 2)
					{
						similarity[2] = 0;

						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of birthday is 0 :" << endl;
						logFile << "some data format is a bit off, needs double checking!" << endl;
						logFile << "1 : " << data1[2] << " vs. " << "2 : " << data2[2] << endl << endl;
					}

				}
				else if (data1[2] == "" || data2[2] == "")
				{
					similarity[2] = 0;

					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of birthday is 0 :" << endl;
					logFile << "some data doesn't exist!" << endl;
					logFile << "1 : " << data1[2] << " vs. " << "2 : " << data2[2] << endl << endl;
				}

				//function4, similarity for blood type, 0/1
				if (data1[3] != "" && data2[3] != "")
				{
					if (data1[3] == data2[3])
					{
						similarity[3] = 1;
					}
					else
					{
						similarity[3] = 0;
					}
				}
				else if (data1[3] == "" || data2[3] == "")
				{
					similarity[3] = 0;
				}



				//function5, similarity for location, jaccard
				if (data1[4] == "" || data2[4] == "")
				{
					similarity[4] = 0;

					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of location is 0 :" << endl;
					logFile << "some data doesn't exist!" << endl;
					logFile << "1 : " << data1[4] << " vs. " << "2 : " << data2[4] << endl << endl;
				}
				else if (data1[4] != "" || data2[4] != "")
				{
					int i, j, x = 0;


					string sentence = data2[4];//FB,、
					string temp2[50];

					stringstream ss(sentence);//FB
					string item;
					int l = 0;
					while (getline(ss, item, ';'))
					{
						cout << "item " << l << " : " << item << endl;
						temp2[l] = item;
						l++;
					}
					x = l - 1;

					sentence = data1[4];//FB,、
					string temp3[50];

					stringstream ss1(sentence);//FB
					string item1;
					int l2 = 0;
					while (getline(ss1, item1, ';'))
					{
						cout << "item " << l2 << " : " << item1 << endl;
						temp3[l2] = item1;
						l2++;
					}

					string ptt, fb;
					double amount = 0;
					double same = 0,result = 0;
					vector <string> all_string;

					for (int t = l - 1; t >= 0; t--)
					{
						for (int j = 0; j < l2; j++)
						{
							ptt = temp3[j];
							fb = temp2[t];

							if (ptt == fb)
							{
								same++;
							}
							if (find(all_string.begin(), all_string.end(), ptt) == all_string.end())
							{
								all_string.push_back(ptt);
							}
							if (find(all_string.begin(), all_string.end(), fb) == all_string.end())
							{
								all_string.push_back(fb);
							}
						}
					}

					amount = all_string.size();
					result = (same / amount);
					similarity[4] = result;

					if (similarity[4] == 0 || similarity[4] > 1)
					{
						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of location is 0 or larger than 1:" << endl;
						logFile << "needs double checking!" << endl;
						logFile << "1 : " << data1[4] << " vs. " << "2 : " << data2[4] << endl << endl;
					}
				}

				//function6, similarity for education, 0/1 and jacard
				if (data1[5] == "" || data2[5] == "")
				{
					similarity[5] = 0;

					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of education is 0 :" << endl;
					logFile << "some data doesn't exist!" << endl;
					logFile << "1 : " << data1[5] << " vs. " << "2 : " << data2[5] << endl << endl;
				}
				else if (data1[5] != "" || data2[5] != "")
				{
					int i, j, x = 0;


					string sentence = data2[5];//FB,、
					string temp2[50];

					stringstream ss(sentence);//FB
					string item;
					int l = 0;
					while (getline(ss, item, ';'))
					{
						cout << "item " << l << " : " << item << endl;
						temp2[l] = item;
						l++;
					}
					x = l - 1;

					sentence = data1[5];//FB,、
					string temp3[50];

					stringstream ss1(sentence);//FB
					string item1;
					int l2 = 0;
					while (getline(ss1, item1, ';'))
					{
						cout << "item " << l2 << " : " << item1 << endl;
						temp3[l2] = item1;
						l2++;
					}

					string ptt, fb;
					double amount = 0;
					double same = 0, result = 0;
					vector <string> all_string;

					for (int t = l - 1; t >= 0; t--)
					{
						for (int j = 0; j < l2; j++)
						{
							ptt = temp3[j];
							fb = temp2[t];

							if (ptt == fb)
							{
								same++;
							}
							if (find(all_string.begin(), all_string.end(), ptt) == all_string.end())
							{
								all_string.push_back(ptt);
							}
							if (find(all_string.begin(), all_string.end(), fb) == all_string.end())
							{
								all_string.push_back(fb);
							}
						}
					}

					amount = all_string.size();
					result = (same / amount);
					similarity[5] = result;

					if (similarity[5] == 0 || similarity[5] > 1)
					{
						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of school is 0 or larger than 1:" << endl;
						logFile << "needs double checking!" << endl;
						logFile << "1 : " << data1[5] << " vs. " << "2 : " << data2[5] << endl << endl;
					}
				}

				//function7, similarity for career, 0/1
				if (data1[6] == "" || data2[6] == "")
				{
					similarity[6] = 0;

					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of career is 0 :" << endl;
					logFile << "some data doesn't exist!" << endl;
					logFile << "1 : " << data1[6] << " vs. " << "2 : " << data2[6] << endl << endl;
				}
				else if (data1[6] != "" || data2[6] != "")
				{
					if (data1[6] == data2[6])
					{
						similarity[6] = 1;
					}
					else
					{
						similarity[6] = 0;
					}

					if (similarity[6] == 0 || similarity[6] > 1)
					{
						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of career is 0 or larger than 1:" << endl;
						logFile << "needs double checking!" << endl;
						logFile << "1 : " << data1[6] << " vs. " << "2 : " << data2[6] << endl << endl;
					}
				}

				//function8, similarity for company, 0/1
				if (data1[7] == "" || data2[7] == "")
				{
					similarity[7] = 0;

					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of company is 0 :" << endl;
					logFile << "some data doesn't exist!" << endl;
					logFile << "1 : " << data1[7] << " vs. " << "2 : " << data2[7] << endl << endl;
				}
				else if (data1[7] != "" || data2[7] != "")
				{
					if (data1[7] == data2[7])
					{
						similarity[7] = 1;
					}
					else
					{
						similarity[7] = 0;
					}

					if (similarity[7] == 0 || similarity[7] > 1)
					{
						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of company is 0 or larger than 1:" << endl;
						logFile << "needs double checking!" << endl;
						logFile << "1 : " << data1[7] << " vs. " << "2 : " << data2[7] << endl << endl;
					}
				}

				//function9, similarity for hobby, jaccard
				if (data1[8] != "" && data2[8] != "")
				{
					int i, j, x = 0;


					string sentence = data2[8];//FB,、
					string temp2[50];

					stringstream ss(sentence);//FB
					string item;
					int l = 0;
					while (getline(ss, item, ';'))
					{
						cout << "item " << l << " : " << item << endl;
						temp2[l] = item;
						l++;
					}
					x = l - 1;

					sentence = data1[8];//FB,、
					string temp3[50];

					stringstream ss1(sentence);//FB
					string item1;
					int l2 = 0;
					while (getline(ss1, item1, ';'))
					{
						cout << "item " << l2 << " : " << item1 << endl;
						temp3[l2] = item1;
						l2++;
					}

					string ptt, fb;
					double amount = 0;
					double same = 0, result = 0;
					vector <string> all_string;

					for (int t = l - 1; t >= 0; t--)
					{
						for (int j = 0; j < l2; j++)
						{
							ptt = temp3[j];
							fb = temp2[t];

							if (ptt == fb)
							{
								same++;
							}
							if (find(all_string.begin(), all_string.end(), ptt) == all_string.end())
							{
								all_string.push_back(ptt);
							}
							if (find(all_string.begin(), all_string.end(), fb) == all_string.end())
							{
								all_string.push_back(fb);
							}
						}
					}

					amount = all_string.size();
					result = (same / amount);
					similarity[8] = result;

					if (similarity[8] == 0 || similarity[8] > 1)
					{
						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of hobby is 0 or larger than 1:" << endl;
						logFile << "needs double checking!" << endl;
						logFile << "1 : " << data1[8] << " vs. " << "2 : " << data2[8] << endl << endl;
					}
				}

				//function10, similarity for marital status, 0/1
				if (data1[9] == "" || data2[9] == "")
				{
					similarity[9] = 0;
				}
				else if (data1[9] != "" || data2[9] != "")
				{
					if (data1[9] == data2[9])//beware of different formatting
					{
						similarity[9] = 1;
					}

					if (data1[9] != data2[9])//report problems
					{
						similarity[9] = 0;

						logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
						logFile << "similarity of marital status is 0 :" << endl;
						logFile << "needs double checking!" << endl;
						logFile << "1 : " << data1[9] << " vs. " << "2 : " << data2[9] << endl << endl;
					}
				}
				if (similarity[9] == 0)//report problems
				{
					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of marital status is 0 :" << endl;
					logFile << "needs double checking!" << endl;
					logFile << "1 : " << data1[9] << " vs. " << "2 : " << data2[9] << endl << endl;
				}

				//function11, similarity for other social network, 0/1
				if (data1[10] != "" && data2[10] != "")
				{
					string sentence1 = data1[10];//PTT,;
					string sentence2 = data2[10];//FB,、

					string temp1[5];//at most 26 types
					string temp2[5];

					stringstream ss(sentence1);//PTT
					string item;
					int i = 0;
					int deno = 0;
					while (getline(ss, item, ';'))
					{
						temp1[i] = item;
						i++;
					}


					stringstream ss2(sentence2);//FB
					string item2;
					i = 0;
					while (getline(ss2, item2, ';'))
					{
						temp2[i] = item2;
						i++;
					}
					deno = i;

					int same = 0;
					for (int i = 0; i < 5; i++)
					{
						for (int j = 0; j < deno; j++)
						{
							if (temp1[i] == temp2[j])
							{
								same++;
							}
						}
					}

					similarity[10] = (double)same / (double)deno;

				}
				else if (data1[10] == "" || data2[10] == "")
				{
					similarity[10] = 0;//equals to 0 or just blank?
				}
				if (similarity[10] == 0)//report problems
				{
					logFile << "files : " + fileName1 + " vs. " + fileName2 << endl;
					logFile << "similarity of SNS is 0 :" << endl;
					logFile << "needs double checking!" << endl;
					logFile << "1 : " << data1[10] << " vs. " << "2 : " << data2[10] << endl << endl;
				}


				//output similarity for debug

				for (int i = 0; i <= 10; i++)
				{
					if (similarity[i] > 1)
					{
						similarity[i] = 1;
					}
				}

				if (index_PTT == index_FB)//labels
				{
					
					similarity[11] = 1;
					label_1 << similarity[11] << " ";
					for (int i = 0; i <= 10; i++)
					{
						//cout << similarity[i] << endl;
						label_1 << i + 1 << ":" << similarity[i] << " ";
					}
					label_1 << endl;
				}
				else
				{
					similarity[11] = 0;
					label_0 << similarity[11] << " ";
					label_0 << "PTT : " << index_PTT << " X FB : " << index_FB << " => ";
					for (int i = 0; i <= 10; i++)
					{
						//cout << similarity[i] << endl;
						label_0 << i + 1 << ":" << similarity[i] << " ";
					}
					label_0 << endl;
				}

				cout << endl << "Similarity : " << index_PTT << " X " << index_FB << endl;
				result << "PTT : " << index_PTT << " X FB : " << index_FB << " => ";
				result << similarity[11] << " ";
				
				for (int i = 0; i <= 10; i++)
				{
					//result << similarity[i] << " ";
					result << i + 1 << ":" << similarity[i] << " ";
				}
				result << endl;
			}
		}
	}
			

	return 0;
}
